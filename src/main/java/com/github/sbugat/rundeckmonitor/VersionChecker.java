package com.github.sbugat.rundeckmonitor;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.swing.JOptionPane;

public class VersionChecker {

	private static final String MAVEN_META_INF_DATE_COMMENT_FORMAT = "EEE MMM d HH:mm:ss zzz yyyy"; //$NON-NLS-1$

	private static final SimpleDateFormat BUILD_DATE_FORMAT = new SimpleDateFormat( MAVEN_META_INF_DATE_COMMENT_FORMAT, Locale.ENGLISH );

	public VersionChecker( final String gitHubProjectRootUrl, final String jarFileName ) {

		final String jarWithDependenciesFileName = jarFileName.replaceFirst( ".jar$" , "-jar-with-dependencies.jar" );

		try {
			final URL url = new URL( gitHubProjectRootUrl + "/blob/master/target/" + jarFileName + "?raw=true" );
			final ZipInputStream zis = new ZipInputStream( url.openStream() );

			ZipEntry entry = zis.getNextEntry();

			while( null != entry ) {

				if( entry.getName().matches( "META-INF/maven/.*/pom.properties" ) ) {

					final Date lastBuildDate = extractBuildDate( zis );

					final Date currentBuildDate = extractBuildDate( VersionChecker.class.getClassLoader().getResourceAsStream( "META-INF/maven/org.rundeck.monitor/rundeck-monitor/pom.properties" ) );

					if( lastBuildDate.after( currentBuildDate) ) {

						JOptionPane.showMessageDialog( null, "", "Update found!", JOptionPane.YES_NO_OPTION ); //$NON-NLS-1$ //$NON-NLS-2$
					}
					else {

						JOptionPane.showConfirmDialog( null, "", "OK!", JOptionPane.YES_NO_OPTION ); //$NON-NLS-1$ //$NON-NLS-2$
						//JOptionPane.YES_OPTION

						downloadFile( RundeckMonitorTrayIcon.RUNDECK_MONITOR_PROJECT_URL + "/blob/master/target/" + jarWithDependenciesFileName + "?raw=true", jarWithDependenciesFileName + ".download.tmp" );

						new File( jarWithDependenciesFileName + ".download.tmp" ).renameTo( new File( jarWithDependenciesFileName + ".download" ) );

						new File( jarWithDependenciesFileName ).renameTo( new File( jarWithDependenciesFileName + ".tmp" ) );
					}

					break;
				}

				entry = zis.getNextEntry();
			}
		}
		catch ( final Exception e) {

			//Ignore any error during update process
			new File( jarWithDependenciesFileName + ".download.tmp" ).delete();
		}
	}

	private static Date extractBuildDate( final InputStream inputStream ) throws IOException, ParseException {

		final BufferedReader reader = new BufferedReader( new InputStreamReader( inputStream, StandardCharsets.UTF_8 ) );

		//Ignore the first line: #Generated by Maven
		reader.readLine();

		//Read the date: #Thu Jun 26 00:02:43 CEST 2014
		final String date = reader.readLine().substring( 1 );
		return BUILD_DATE_FORMAT.parse( date );
	}

	private static void downloadFile( final String sourceFile, final String destFile ) throws IOException {

		final URL url = new URL( sourceFile );

		Files.copy( url.openStream(), Paths.get( destFile ) );
	}
}
